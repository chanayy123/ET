// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETModel {

  #region Enums
  public enum OpRetCode {
    Success = 0,
    RoomAlreadyIn = 200001,
    RoomAlreadyFull = 200002,
    RoomStateBan = 200003,
    RoomNotExist = 200004,
    LoginParamError = 200005,
    LoginAccPwdError = 200006,
    AccountAlreadyExist = 200007,
    AccountMaxUserIdError = 200008,
    UserGetInfoError = 200009,
    RoomNotEnoughCoin = 200010,
    RoomTooMuchCoin = 200011,
    RoomAlreadyGaming = 200012,
    RoomAlreadyOut = 200013,
    MatchAlreadyIn = 200014,
    MatchAlreadyOut = 200015,
    VerifyKeyInvalid = 200016,
    GateUserNotExist = 200017,
    KickOtherLogin = 200018,
    CreateRoomAlreadyIn = 200019,
    MatchIsClosed = 200020,
    RoomIsClosed = 200021,
    RoomConfigError = 200022,
    GameOpInvalid = 200023,
  }

  public enum PlayerState {
    None = 0,
    Online = 1,
    Ready = 2,
    /// <summary>
    ///托管
    /// </summary>
    Auto = 4,
    /// <summary>
    ///已看牌
    /// </summary>
    Check = 8,
    /// <summary>
    ///弃牌
    /// </summary>
    Fold = 16,
    /// <summary>
    ///暂离
    /// </summary>
    Leave = 32,
    /// <summary>
    ///观众
    /// </summary>
    Audience = 64,
  }

  public enum GameId {
    Default = 0,
    BullFight = 1,
  }

  #endregion

  #region Messages
  public partial class CS_Ping : pb::IMessage {
    private static readonly pb::MessageParser<CS_Ping> _parser = new pb::MessageParser<CS_Ping>(() => (CS_Ping)MessagePool.Instance.Fetch(typeof(CS_Ping)));
    public static pb::MessageParser<CS_Ping> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class SC_Ping : pb::IMessage {
    private static readonly pb::MessageParser<SC_Ping> _parser = new pb::MessageParser<SC_Ping>(() => (SC_Ping)MessagePool.Instance.Fetch(typeof(SC_Ping)));
    public static pb::MessageParser<SC_Ping> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class CS_Register : pb::IMessage {
    private static readonly pb::MessageParser<CS_Register> _parser = new pb::MessageParser<CS_Register>(() => (CS_Register)MessagePool.Instance.Fetch(typeof(CS_Register)));
    public static pb::MessageParser<CS_Register> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      account_ = "";
      password_ = "";
      name_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class SC_Register : pb::IMessage {
    private static readonly pb::MessageParser<SC_Register> _parser = new pb::MessageParser<SC_Register>(() => (SC_Register)MessagePool.Instance.Fetch(typeof(SC_Register)));
    public static pb::MessageParser<SC_Register> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string key_ = "";
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Address);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Key);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      address_ = "";
      key_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            Address = input.ReadString();
            break;
          }
          case 42: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class CS_Login : pb::IMessage {
    private static readonly pb::MessageParser<CS_Login> _parser = new pb::MessageParser<CS_Login>(() => (CS_Login)MessagePool.Instance.Fetch(typeof(CS_Login)));
    public static pb::MessageParser<CS_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int loginType_;
    public int LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    private int platformType_;
    public int PlatformType {
      get { return platformType_; }
      set {
        platformType_ = value;
      }
    }

    private string dataStr_ = "";
    public string DataStr {
      get { return dataStr_; }
      set {
        dataStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (LoginType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LoginType);
      }
      if (PlatformType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlatformType);
      }
      if (DataStr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DataStr);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginType);
      }
      if (PlatformType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlatformType);
      }
      if (DataStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataStr);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      loginType_ = 0;
      platformType_ = 0;
      dataStr_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            LoginType = input.ReadInt32();
            break;
          }
          case 24: {
            PlatformType = input.ReadInt32();
            break;
          }
          case 34: {
            DataStr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class SC_Login : pb::IMessage {
    private static readonly pb::MessageParser<SC_Login> _parser = new pb::MessageParser<SC_Login>(() => (SC_Login)MessagePool.Instance.Fetch(typeof(SC_Login)));
    public static pb::MessageParser<SC_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string key_ = "";
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Address);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Key);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      address_ = "";
      key_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            Address = input.ReadString();
            break;
          }
          case 42: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class CS_VerifyKey : pb::IMessage {
    private static readonly pb::MessageParser<CS_VerifyKey> _parser = new pb::MessageParser<CS_VerifyKey>(() => (CS_VerifyKey)MessagePool.Instance.Fetch(typeof(CS_VerifyKey)));
    public static pb::MessageParser<CS_VerifyKey> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string key_ = "";
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      key_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class SC_VerifyKey : pb::IMessage {
    private static readonly pb::MessageParser<SC_VerifyKey> _parser = new pb::MessageParser<SC_VerifyKey>(() => (SC_VerifyKey)MessagePool.Instance.Fetch(typeof(SC_VerifyKey)));
    public static pb::MessageParser<SC_VerifyKey> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class UserInfo : pb::IMessage {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => (UserInfo)MessagePool.Instance.Fetch(typeof(UserInfo)));
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    private int userId_;
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int level_;
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int coin_;
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    private int head_;
    public int Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Coin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Coin);
      }
      if (Head != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Head);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (Head != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Head);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      level_ = 0;
      coin_ = 0;
      head_ = 0;
      name_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Coin = input.ReadInt32();
            break;
          }
          case 32: {
            Head = input.ReadInt32();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏配置:控制游戏是否开启,房间模式等
  /// </summary>
  public partial class GameConfig : pb::IMessage {
    private static readonly pb::MessageParser<GameConfig> _parser = new pb::MessageParser<GameConfig>(() => (GameConfig)MessagePool.Instance.Fetch(typeof(GameConfig)));
    public static pb::MessageParser<GameConfig> Parser { get { return _parser; } }

    private long hallId_;
    public long HallId {
      get { return hallId_; }
      set {
        hallId_ = value;
      }
    }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int gameMode_;
    public int GameMode {
      get { return gameMode_; }
      set {
        gameMode_ = value;
      }
    }

    private int state_;
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    private int roomType_;
    public int RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    private int minLimitCoin_;
    public int MinLimitCoin {
      get { return minLimitCoin_; }
      set {
        minLimitCoin_ = value;
      }
    }

    private int maxLimitCoin_;
    public int MaxLimitCoin {
      get { return maxLimitCoin_; }
      set {
        maxLimitCoin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (HallId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HallId);
      }
      if (GameId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GameId);
      }
      if (GameMode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameMode);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(State);
      }
      if (RoomType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RoomType);
      }
      if (MinLimitCoin != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MinLimitCoin);
      }
      if (MaxLimitCoin != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxLimitCoin);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (HallId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HallId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (GameMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameMode);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
      }
      if (MinLimitCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinLimitCoin);
      }
      if (MaxLimitCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxLimitCoin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      hallId_ = 0;
      gameId_ = 0;
      gameMode_ = 0;
      state_ = 0;
      roomType_ = 0;
      minLimitCoin_ = 0;
      maxLimitCoin_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HallId = input.ReadInt64();
            break;
          }
          case 16: {
            GameId = input.ReadInt32();
            break;
          }
          case 24: {
            GameMode = input.ReadInt32();
            break;
          }
          case 32: {
            State = input.ReadInt32();
            break;
          }
          case 40: {
            RoomType = input.ReadInt32();
            break;
          }
          case 48: {
            MinLimitCoin = input.ReadInt32();
            break;
          }
          case 56: {
            MaxLimitCoin = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class SC_PlayerData : pb::IMessage {
    private static readonly pb::MessageParser<SC_PlayerData> _parser = new pb::MessageParser<SC_PlayerData>(() => (SC_PlayerData)MessagePool.Instance.Fetch(typeof(SC_PlayerData)));
    public static pb::MessageParser<SC_PlayerData> Parser { get { return _parser; } }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETModel.UserInfo userInfo_;
    public global::ETModel.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.GameConfig> _repeated_gameCfgList_codec
        = pb::FieldCodec.ForMessage(42, global::ETModel.GameConfig.Parser);
    private pbc::RepeatedField<global::ETModel.GameConfig> gameCfgList_ = new pbc::RepeatedField<global::ETModel.GameConfig>();
    public pbc::RepeatedField<global::ETModel.GameConfig> GameCfgList {
      get { return gameCfgList_; }
      set { gameCfgList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ActorId);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserInfo);
      }
      gameCfgList_.WriteTo(output, _repeated_gameCfgList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      size += gameCfgList_.CalculateSize(_repeated_gameCfgList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameId_ = 0;
      roomId_ = 0;
      actorId_ = 0;
      if (userInfo_ != null) MessagePool.Instance.Recycle(userInfo_); userInfo_ = null;
      for (int i = 0; i < gameCfgList_.Count; i++) { MessagePool.Instance.Recycle(gameCfgList_[i]); }
      gameCfgList_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 24: {
            ActorId = input.ReadInt64();
            break;
          }
          case 34: {
            if (userInfo_ == null) {
              userInfo_ = new global::ETModel.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
          case 42: {
            gameCfgList_.AddEntriesFrom(input, _repeated_gameCfgList_codec);
            break;
          }
        }
      }
    }

  }

  public partial class CS_UserInfo : pb::IMessage {
    private static readonly pb::MessageParser<CS_UserInfo> _parser = new pb::MessageParser<CS_UserInfo>(() => (CS_UserInfo)MessagePool.Instance.Fetch(typeof(CS_UserInfo)));
    public static pb::MessageParser<CS_UserInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int userId_;
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class SC_UserInfo : pb::IMessage {
    private static readonly pb::MessageParser<SC_UserInfo> _parser = new pb::MessageParser<SC_UserInfo>(() => (SC_UserInfo)MessagePool.Instance.Fetch(typeof(SC_UserInfo)));
    public static pb::MessageParser<SC_UserInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETModel.UserInfo userInfo_;
    public global::ETModel.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      if (userInfo_ != null) MessagePool.Instance.Recycle(userInfo_); userInfo_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            if (userInfo_ == null) {
              userInfo_ = new global::ETModel.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
        }
      }
    }

  }

  public partial class SC_KickUser : pb::IMessage {
    private static readonly pb::MessageParser<SC_KickUser> _parser = new pb::MessageParser<SC_KickUser>(() => (SC_KickUser)MessagePool.Instance.Fetch(typeof(SC_KickUser)));
    public static pb::MessageParser<SC_KickUser> Parser { get { return _parser; } }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class MatchRoom : pb::IMessage {
    private static readonly pb::MessageParser<MatchRoom> _parser = new pb::MessageParser<MatchRoom>(() => (MatchRoom)MessagePool.Instance.Fetch(typeof(MatchRoom)));
    public static pb::MessageParser<MatchRoom> Parser { get { return _parser; } }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private int state_;
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    private int count_;
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      state_ = 0;
      count_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class CS_RoomList : pb::IMessage {
    private static readonly pb::MessageParser<CS_RoomList> _parser = new pb::MessageParser<CS_RoomList>(() => (CS_RoomList)MessagePool.Instance.Fetch(typeof(CS_RoomList)));
    public static pb::MessageParser<CS_RoomList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int hallId_;
    public int HallId {
      get { return hallId_; }
      set {
        hallId_ = value;
      }
    }

    private int userId_;
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long gateSessionId_;
    public long GateSessionId {
      get { return gateSessionId_; }
      set {
        gateSessionId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (HallId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HallId);
      }
      if (UserId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserId);
      }
      if (GateSessionId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(GateSessionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (HallId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HallId);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (GateSessionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateSessionId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      hallId_ = 0;
      userId_ = 0;
      gateSessionId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            HallId = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt32();
            break;
          }
          case 40: {
            GateSessionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class SC_RoomList : pb::IMessage {
    private static readonly pb::MessageParser<SC_RoomList> _parser = new pb::MessageParser<SC_RoomList>(() => (SC_RoomList)MessagePool.Instance.Fetch(typeof(SC_RoomList)));
    public static pb::MessageParser<SC_RoomList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int hallId_;
    public int HallId {
      get { return hallId_; }
      set {
        hallId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.MatchRoom> _repeated_list_codec
        = pb::FieldCodec.ForMessage(42, global::ETModel.MatchRoom.Parser);
    private pbc::RepeatedField<global::ETModel.MatchRoom> list_ = new pbc::RepeatedField<global::ETModel.MatchRoom>();
    public pbc::RepeatedField<global::ETModel.MatchRoom> List {
      get { return list_; }
      set { list_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (HallId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HallId);
      }
      list_.WriteTo(output, _repeated_list_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (HallId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HallId);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      hallId_ = 0;
      for (int i = 0; i < list_.Count; i++) { MessagePool.Instance.Recycle(list_[i]); }
      list_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 32: {
            HallId = input.ReadInt32();
            break;
          }
          case 42: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public partial class CS_CreateRoomList : pb::IMessage {
    private static readonly pb::MessageParser<CS_CreateRoomList> _parser = new pb::MessageParser<CS_CreateRoomList>(() => (CS_CreateRoomList)MessagePool.Instance.Fetch(typeof(CS_CreateRoomList)));
    public static pb::MessageParser<CS_CreateRoomList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int userId_;
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long gateSessionId_;
    public long GateSessionId {
      get { return gateSessionId_; }
      set {
        gateSessionId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (GateSessionId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(GateSessionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (GateSessionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateSessionId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      gateSessionId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 24: {
            GateSessionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class SC_CreateRoomList : pb::IMessage {
    private static readonly pb::MessageParser<SC_CreateRoomList> _parser = new pb::MessageParser<SC_CreateRoomList>(() => (SC_CreateRoomList)MessagePool.Instance.Fetch(typeof(SC_CreateRoomList)));
    public static pb::MessageParser<SC_CreateRoomList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.MatchRoom> _repeated_list_codec
        = pb::FieldCodec.ForMessage(34, global::ETModel.MatchRoom.Parser);
    private pbc::RepeatedField<global::ETModel.MatchRoom> list_ = new pbc::RepeatedField<global::ETModel.MatchRoom>();
    public pbc::RepeatedField<global::ETModel.MatchRoom> List {
      get { return list_; }
      set { list_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      list_.WriteTo(output, _repeated_list_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      for (int i = 0; i < list_.Count; i++) { MessagePool.Instance.Recycle(list_[i]); }
      list_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public partial class CS_EnterRoom : pb::IMessage {
    private static readonly pb::MessageParser<CS_EnterRoom> _parser = new pb::MessageParser<CS_EnterRoom>(() => (CS_EnterRoom)MessagePool.Instance.Fetch(typeof(CS_EnterRoom)));
    public static pb::MessageParser<CS_EnterRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private int userId_;
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long gateSessionId_;
    public long GateSessionId {
      get { return gateSessionId_; }
      set {
        gateSessionId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (UserId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserId);
      }
      if (GateSessionId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(GateSessionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (GateSessionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateSessionId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      roomId_ = 0;
      userId_ = 0;
      gateSessionId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt32();
            break;
          }
          case 40: {
            GateSessionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class SC_EnterRoom : pb::IMessage {
    private static readonly pb::MessageParser<SC_EnterRoom> _parser = new pb::MessageParser<SC_EnterRoom>(() => (SC_EnterRoom)MessagePool.Instance.Fetch(typeof(SC_EnterRoom)));
    public static pb::MessageParser<SC_EnterRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class CS_LeaveRoom : pb::IMessage {
    private static readonly pb::MessageParser<CS_LeaveRoom> _parser = new pb::MessageParser<CS_LeaveRoom>(() => (CS_LeaveRoom)MessagePool.Instance.Fetch(typeof(CS_LeaveRoom)));
    public static pb::MessageParser<CS_LeaveRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class SC_LeaveRoom : pb::IMessage {
    private static readonly pb::MessageParser<SC_LeaveRoom> _parser = new pb::MessageParser<SC_LeaveRoom>(() => (SC_LeaveRoom)MessagePool.Instance.Fetch(typeof(SC_LeaveRoom)));
    public static pb::MessageParser<SC_LeaveRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class CS_CreateRoom : pb::IMessage {
    private static readonly pb::MessageParser<CS_CreateRoom> _parser = new pb::MessageParser<CS_CreateRoom>(() => (CS_CreateRoom)MessagePool.Instance.Fetch(typeof(CS_CreateRoom)));
    public static pb::MessageParser<CS_CreateRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int userId_;
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long gateSessionId_;
    public long GateSessionId {
      get { return gateSessionId_; }
      set {
        gateSessionId_ = value;
      }
    }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int gameMode_;
    public int GameMode {
      get { return gameMode_; }
      set {
        gameMode_ = value;
      }
    }

    private int hallType_;
    public int HallType {
      get { return hallType_; }
      set {
        hallType_ = value;
      }
    }

    private string params_ = "";
    /// <summary>
    ///自定义参数
    /// </summary>
    public string Params {
      get { return params_; }
      set {
        params_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (GateSessionId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(GateSessionId);
      }
      if (GameId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GameId);
      }
      if (GameMode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GameMode);
      }
      if (HallType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HallType);
      }
      if (Params.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Params);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (GateSessionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateSessionId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (GameMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameMode);
      }
      if (HallType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HallType);
      }
      if (Params.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Params);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      gateSessionId_ = 0;
      gameId_ = 0;
      gameMode_ = 0;
      hallType_ = 0;
      params_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 24: {
            GateSessionId = input.ReadInt64();
            break;
          }
          case 32: {
            GameId = input.ReadInt32();
            break;
          }
          case 40: {
            GameMode = input.ReadInt32();
            break;
          }
          case 48: {
            HallType = input.ReadInt32();
            break;
          }
          case 58: {
            Params = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class SC_CreateRoom : pb::IMessage {
    private static readonly pb::MessageParser<SC_CreateRoom> _parser = new pb::MessageParser<SC_CreateRoom>(() => (SC_CreateRoom)MessagePool.Instance.Fetch(typeof(SC_CreateRoom)));
    public static pb::MessageParser<SC_CreateRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (RoomId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoomId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      roomId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 32: {
            RoomId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class CS_DisbandRoom : pb::IMessage {
    private static readonly pb::MessageParser<CS_DisbandRoom> _parser = new pb::MessageParser<CS_DisbandRoom>(() => (CS_DisbandRoom)MessagePool.Instance.Fetch(typeof(CS_DisbandRoom)));
    public static pb::MessageParser<CS_DisbandRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int userId_;
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long gateSessionId_;
    public long GateSessionId {
      get { return gateSessionId_; }
      set {
        gateSessionId_ = value;
      }
    }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (GateSessionId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(GateSessionId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoomId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (GateSessionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateSessionId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      gateSessionId_ = 0;
      roomId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 24: {
            GateSessionId = input.ReadInt64();
            break;
          }
          case 32: {
            RoomId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class SC_DisbandRoom : pb::IMessage {
    private static readonly pb::MessageParser<SC_DisbandRoom> _parser = new pb::MessageParser<SC_DisbandRoom>(() => (SC_DisbandRoom)MessagePool.Instance.Fetch(typeof(SC_DisbandRoom)));
    public static pb::MessageParser<SC_DisbandRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class GamePlayerData : pb::IMessage {
    private static readonly pb::MessageParser<GamePlayerData> _parser = new pb::MessageParser<GamePlayerData>(() => (GamePlayerData)MessagePool.Instance.Fetch(typeof(GamePlayerData)));
    public static pb::MessageParser<GamePlayerData> Parser { get { return _parser; } }

    private int userId_;
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int head_;
    public int Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    private int coin_;
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    private int pos_;
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETModel.PlayerState state_ = 0;
    public global::ETModel.PlayerState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (Head != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Head);
      }
      if (Coin != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Coin);
      }
      if (Pos != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Pos);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (State != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) State);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (Head != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Head);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      head_ = 0;
      coin_ = 0;
      pos_ = 0;
      name_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 24: {
            Head = input.ReadInt32();
            break;
          }
          case 32: {
            Coin = input.ReadInt32();
            break;
          }
          case 40: {
            Pos = input.ReadInt32();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 56: {
            state_ = (global::ETModel.PlayerState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public partial class GameRoomData : pb::IMessage {
    private static readonly pb::MessageParser<GameRoomData> _parser = new pb::MessageParser<GameRoomData>(() => (GameRoomData)MessagePool.Instance.Fetch(typeof(GameRoomData)));
    public static pb::MessageParser<GameRoomData> Parser { get { return _parser; } }

    private int roomId_;
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private int state_;
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    private int roomType_;
    public int RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    private int gameId_;
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    private int gameMode_;
    public int GameMode {
      get { return gameMode_; }
      set {
        gameMode_ = value;
      }
    }

    private int hallType_;
    public int HallType {
      get { return hallType_; }
      set {
        hallType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      if (RoomType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomType);
      }
      if (GameId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GameId);
      }
      if (GameMode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GameMode);
      }
      if (HallType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HallType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (GameMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameMode);
      }
      if (HallType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HallType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      state_ = 0;
      roomType_ = 0;
      gameId_ = 0;
      gameMode_ = 0;
      hallType_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
          case 24: {
            RoomType = input.ReadInt32();
            break;
          }
          case 32: {
            GameId = input.ReadInt32();
            break;
          }
          case 40: {
            GameMode = input.ReadInt32();
            break;
          }
          case 48: {
            HallType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class SC_GameRoomInfo : pb::IMessage {
    private static readonly pb::MessageParser<SC_GameRoomInfo> _parser = new pb::MessageParser<SC_GameRoomInfo>(() => (SC_GameRoomInfo)MessagePool.Instance.Fetch(typeof(SC_GameRoomInfo)));
    public static pb::MessageParser<SC_GameRoomInfo> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETModel.GameRoomData roomInfo_;
    public global::ETModel.GameRoomData RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ActorId);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      actorId_ = 0;
      if (roomInfo_ != null) MessagePool.Instance.Recycle(roomInfo_); roomInfo_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActorId = input.ReadInt64();
            break;
          }
          case 18: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::ETModel.GameRoomData();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
        }
      }
    }

  }

  public partial class SC_PlayerLeave : pb::IMessage {
    private static readonly pb::MessageParser<SC_PlayerLeave> _parser = new pb::MessageParser<SC_PlayerLeave>(() => (SC_PlayerLeave)MessagePool.Instance.Fetch(typeof(SC_PlayerLeave)));
    public static pb::MessageParser<SC_PlayerLeave> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int userId_;
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ActorId);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      actorId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActorId = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器主动踢玩家出房间
  /// </summary>
  public partial class SC_KickPlayer : pb::IMessage {
    private static readonly pb::MessageParser<SC_KickPlayer> _parser = new pb::MessageParser<SC_KickPlayer>(() => (SC_KickPlayer)MessagePool.Instance.Fetch(typeof(SC_KickPlayer)));
    public static pb::MessageParser<SC_KickPlayer> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int reason_;
    /// <summary>
    ///0:主动退出 1 游戏结束自动退出  2 强制退出
    /// </summary>
    public int Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ActorId);
      }
      if (Reason != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Reason);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      actorId_ = 0;
      reason_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActorId = input.ReadInt64();
            break;
          }
          case 16: {
            Reason = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class SC_RoomListChanged : pb::IMessage {
    private static readonly pb::MessageParser<SC_RoomListChanged> _parser = new pb::MessageParser<SC_RoomListChanged>(() => (SC_RoomListChanged)MessagePool.Instance.Fetch(typeof(SC_RoomListChanged)));
    public static pb::MessageParser<SC_RoomListChanged> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.MatchRoom> _repeated_list_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.MatchRoom.Parser);
    private pbc::RepeatedField<global::ETModel.MatchRoom> list_ = new pbc::RepeatedField<global::ETModel.MatchRoom>();
    public pbc::RepeatedField<global::ETModel.MatchRoom> List {
      get { return list_; }
      set { list_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ActorId);
      }
      list_.WriteTo(output, _repeated_list_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      actorId_ = 0;
      for (int i = 0; i < list_.Count; i++) { MessagePool.Instance.Recycle(list_[i]); }
      list_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActorId = input.ReadInt64();
            break;
          }
          case 18: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public partial class CS_EnterScene : pb::IMessage {
    private static readonly pb::MessageParser<CS_EnterScene> _parser = new pb::MessageParser<CS_EnterScene>(() => (CS_EnterScene)MessagePool.Instance.Fetch(typeof(CS_EnterScene)));
    public static pb::MessageParser<CS_EnterScene> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int hallId_;
    public int HallId {
      get { return hallId_; }
      set {
        hallId_ = value;
      }
    }

    private int userId_;
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long gateSessionId_;
    public long GateSessionId {
      get { return gateSessionId_; }
      set {
        gateSessionId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (HallId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HallId);
      }
      if (UserId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserId);
      }
      if (GateSessionId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(GateSessionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (HallId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HallId);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (GateSessionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateSessionId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      hallId_ = 0;
      userId_ = 0;
      gateSessionId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            HallId = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt32();
            break;
          }
          case 40: {
            GateSessionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class SC_EnterScene : pb::IMessage {
    private static readonly pb::MessageParser<SC_EnterScene> _parser = new pb::MessageParser<SC_EnterScene>(() => (SC_EnterScene)MessagePool.Instance.Fetch(typeof(SC_EnterScene)));
    public static pb::MessageParser<SC_EnterScene> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class CS_LeaveScene : pb::IMessage {
    private static readonly pb::MessageParser<CS_LeaveScene> _parser = new pb::MessageParser<CS_LeaveScene>(() => (CS_LeaveScene)MessagePool.Instance.Fetch(typeof(CS_LeaveScene)));
    public static pb::MessageParser<CS_LeaveScene> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int userId_;
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long gateSessionId_;
    public long GateSessionId {
      get { return gateSessionId_; }
      set {
        gateSessionId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (GateSessionId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(GateSessionId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (GateSessionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateSessionId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      gateSessionId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 24: {
            GateSessionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class SC_LeaveScene : pb::IMessage {
    private static readonly pb::MessageParser<SC_LeaveScene> _parser = new pb::MessageParser<SC_LeaveScene>(() => (SC_LeaveScene)MessagePool.Instance.Fetch(typeof(SC_LeaveScene)));
    public static pb::MessageParser<SC_LeaveScene> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class SC_CoinChange : pb::IMessage {
    private static readonly pb::MessageParser<SC_CoinChange> _parser = new pb::MessageParser<SC_CoinChange>(() => (SC_CoinChange)MessagePool.Instance.Fetch(typeof(SC_CoinChange)));
    public static pb::MessageParser<SC_CoinChange> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int pos_;
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    private int changeCoin_;
    public int ChangeCoin {
      get { return changeCoin_; }
      set {
        changeCoin_ = value;
      }
    }

    private int totalCoin_;
    public int TotalCoin {
      get { return totalCoin_; }
      set {
        totalCoin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ActorId);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (ChangeCoin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChangeCoin);
      }
      if (TotalCoin != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalCoin);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (ChangeCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeCoin);
      }
      if (TotalCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalCoin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      actorId_ = 0;
      pos_ = 0;
      changeCoin_ = 0;
      totalCoin_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActorId = input.ReadInt64();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            ChangeCoin = input.ReadInt32();
            break;
          }
          case 32: {
            TotalCoin = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class CS_GetRoomInfo : pb::IMessage {
    private static readonly pb::MessageParser<CS_GetRoomInfo> _parser = new pb::MessageParser<CS_GetRoomInfo>(() => (CS_GetRoomInfo)MessagePool.Instance.Fetch(typeof(CS_GetRoomInfo)));
    public static pb::MessageParser<CS_GetRoomInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
