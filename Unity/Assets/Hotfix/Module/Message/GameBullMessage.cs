// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameBullMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Enums
  public enum BullCardType {
    BullCtInvalid = 0,
    BullCtBull0 = 1,
    BullCtBull1 = 2,
    BullCtBull2 = 3,
    BullCtBull3 = 4,
    BullCtBull4 = 5,
    BullCtBull5 = 6,
    BullCtBull6 = 7,
    BullCtBull7 = 8,
    BullCtBull8 = 9,
    BullCtBull9 = 10,
    BullCtBull10 = 11,
  }

  public enum BullOpCode {
    BullOpInvalid = 0,
    BullOpBetBank = 1,
    BullOpBetPlayer = 2,
    BullOpShowCard = 3,
  }

  public enum BullGameState {
    BullGsIdle = 0,
    BullGsWaitPlayer = 1,
    BullGsWaitStart = 2,
    BullGsRobbank = 3,
    BullGsSelbank = 4,
    BullGsPlayerbet = 5,
    BullGsDispatch = 6,
    BullGsShowcard = 7,
    BullGsBill = 8,
  }

  public enum BullDefines {
    Default = 0,
    WaitStartTime = 3000,
    RobBankTime = 6000,
    SelBankTime = 2000,
    PlayerBetTime = 5000,
    DispatchTime = 2000,
    ShowCardTime = 5000,
    BillTime = 5000,
  }

  #endregion

  #region Messages
  public partial class BullFightPlayerData : pb::IMessage {
    private static readonly pb::MessageParser<BullFightPlayerData> _parser = new pb::MessageParser<BullFightPlayerData>(() => (BullFightPlayerData)MessagePool.Instance.Fetch(typeof(BullFightPlayerData)));
    public static pb::MessageParser<BullFightPlayerData> Parser { get { return _parser; } }

    private global::ETModel.GamePlayerData data_;
    public global::ETModel.GamePlayerData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private int rate_;
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_handCards_codec
        = pb::FieldCodec.ForInt32(26);
    private pbc::RepeatedField<int> handCards_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> HandCards {
      get { return handCards_; }
      set { handCards_ = value; }
    }

    private global::ETHotfix.BullCardType cardType_ = 0;
    public global::ETHotfix.BullCardType CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (Rate != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rate);
      }
      handCards_.WriteTo(output, _repeated_handCards_codec);
      if (CardType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CardType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      size += handCards_.CalculateSize(_repeated_handCards_codec);
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CardType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      rate_ = 0;
      handCards_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::ETModel.GamePlayerData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 16: {
            Rate = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            handCards_.AddEntriesFrom(input, _repeated_handCards_codec);
            break;
          }
          case 32: {
            cardType_ = (global::ETHotfix.BullCardType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public partial class BullFightRoomData : pb::IMessage {
    private static readonly pb::MessageParser<BullFightRoomData> _parser = new pb::MessageParser<BullFightRoomData>(() => (BullFightRoomData)MessagePool.Instance.Fetch(typeof(BullFightRoomData)));
    public static pb::MessageParser<BullFightRoomData> Parser { get { return _parser; } }

    private global::ETModel.GameRoomData data_;
    public global::ETModel.GameRoomData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.BullFightPlayerData> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.BullFightPlayerData.Parser);
    private pbc::RepeatedField<global::ETHotfix.BullFightPlayerData> playerList_ = new pbc::RepeatedField<global::ETHotfix.BullFightPlayerData>();
    public pbc::RepeatedField<global::ETHotfix.BullFightPlayerData> PlayerList {
      get { return playerList_; }
      set { playerList_ = value; }
    }

    private int bankerPos_;
    public int BankerPos {
      get { return bankerPos_; }
      set {
        bankerPos_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      playerList_.WriteTo(output, _repeated_playerList_codec);
      if (BankerPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BankerPos);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      if (BankerPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankerPos);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      for (int i = 0; i < playerList_.Count; i++) { MessagePool.Instance.Recycle(playerList_[i]); }
      playerList_.Clear();
      bankerPos_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::ETModel.GameRoomData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 18: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
          case 24: {
            BankerPos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class SC_BullRoomInfo : pb::IMessage {
    private static readonly pb::MessageParser<SC_BullRoomInfo> _parser = new pb::MessageParser<SC_BullRoomInfo>(() => (SC_BullRoomInfo)MessagePool.Instance.Fetch(typeof(SC_BullRoomInfo)));
    public static pb::MessageParser<SC_BullRoomInfo> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.BullFightRoomData data_;
    public global::ETHotfix.BullFightRoomData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ActorId);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      actorId_ = 0;
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActorId = input.ReadInt64();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::ETHotfix.BullFightRoomData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///断线重连,客户端主动请求当前游戏房间信息
  /// </summary>
  public partial class SC_GetBullRoomInfo : pb::IMessage {
    private static readonly pb::MessageParser<SC_GetBullRoomInfo> _parser = new pb::MessageParser<SC_GetBullRoomInfo>(() => (SC_GetBullRoomInfo)MessagePool.Instance.Fetch(typeof(SC_GetBullRoomInfo)));
    public static pb::MessageParser<SC_GetBullRoomInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.BullFightRoomData data_;
    public global::ETHotfix.BullFightRoomData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (data_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Data);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            if (data_ == null) {
              data_ = new global::ETHotfix.BullFightRoomData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public partial class SC_BullPlayerEnter : pb::IMessage {
    private static readonly pb::MessageParser<SC_BullPlayerEnter> _parser = new pb::MessageParser<SC_BullPlayerEnter>(() => (SC_BullPlayerEnter)MessagePool.Instance.Fetch(typeof(SC_BullPlayerEnter)));
    public static pb::MessageParser<SC_BullPlayerEnter> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.BullFightPlayerData player_;
    public global::ETHotfix.BullFightPlayerData Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ActorId);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      actorId_ = 0;
      if (player_ != null) MessagePool.Instance.Recycle(player_); player_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActorId = input.ReadInt64();
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::ETHotfix.BullFightPlayerData();
            }
            input.ReadMessage(player_);
            break;
          }
        }
      }
    }

  }

  public partial class SC_BullState : pb::IMessage {
    private static readonly pb::MessageParser<SC_BullState> _parser = new pb::MessageParser<SC_BullState>(() => (SC_BullState)MessagePool.Instance.Fetch(typeof(SC_BullState)));
    public static pb::MessageParser<SC_BullState> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.BullGameState state_ = 0;
    public global::ETHotfix.BullGameState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_params_codec
        = pb::FieldCodec.ForInt32(26);
    private pbc::RepeatedField<int> params_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Params {
      get { return params_; }
      set { params_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ActorId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      params_.WriteTo(output, _repeated_params_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      actorId_ = 0;
      params_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActorId = input.ReadInt64();
            break;
          }
          case 16: {
            state_ = (global::ETHotfix.BullGameState) input.ReadEnum();
            break;
          }
          case 26:
          case 24: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  public partial class CS_BullOp : pb::IMessage {
    private static readonly pb::MessageParser<CS_BullOp> _parser = new pb::MessageParser<CS_BullOp>(() => (CS_BullOp)MessagePool.Instance.Fetch(typeof(CS_BullOp)));
    public static pb::MessageParser<CS_BullOp> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.BullOpCode opCode_ = 0;
    public global::ETHotfix.BullOpCode OpCode {
      get { return opCode_; }
      set {
        opCode_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_params_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> params_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Params {
      get { return params_; }
      set { params_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ActorId);
      }
      if (OpCode != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) OpCode);
      }
      params_.WriteTo(output, _repeated_params_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (OpCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OpCode);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      params_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            ActorId = input.ReadInt64();
            break;
          }
          case 24: {
            opCode_ = (global::ETHotfix.BullOpCode) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  public partial class SC_BullOp : pb::IMessage {
    private static readonly pb::MessageParser<SC_BullOp> _parser = new pb::MessageParser<SC_BullOp>(() => (SC_BullOp)MessagePool.Instance.Fetch(typeof(SC_BullOp)));
    public static pb::MessageParser<SC_BullOp> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcId = input.ReadInt32();
            break;
          }
          case 16: {
            Error = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class SC_BullBankerRate : pb::IMessage {
    private static readonly pb::MessageParser<SC_BullBankerRate> _parser = new pb::MessageParser<SC_BullBankerRate>(() => (SC_BullBankerRate)MessagePool.Instance.Fetch(typeof(SC_BullBankerRate)));
    public static pb::MessageParser<SC_BullBankerRate> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int pos_;
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    private int rate_;
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ActorId);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (Rate != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      actorId_ = 0;
      pos_ = 0;
      rate_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActorId = input.ReadInt64();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            Rate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class SC_BullPlayerRate : pb::IMessage {
    private static readonly pb::MessageParser<SC_BullPlayerRate> _parser = new pb::MessageParser<SC_BullPlayerRate>(() => (SC_BullPlayerRate)MessagePool.Instance.Fetch(typeof(SC_BullPlayerRate)));
    public static pb::MessageParser<SC_BullPlayerRate> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int pos_;
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    private int rate_;
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ActorId);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (Rate != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      actorId_ = 0;
      pos_ = 0;
      rate_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActorId = input.ReadInt64();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            Rate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class SC_BullBankerPos : pb::IMessage {
    private static readonly pb::MessageParser<SC_BullBankerPos> _parser = new pb::MessageParser<SC_BullBankerPos>(() => (SC_BullBankerPos)MessagePool.Instance.Fetch(typeof(SC_BullBankerPos)));
    public static pb::MessageParser<SC_BullBankerPos> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int pos_;
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ActorId);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      actorId_ = 0;
      pos_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActorId = input.ReadInt64();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class SC_BullCardsInfo : pb::IMessage {
    private static readonly pb::MessageParser<SC_BullCardsInfo> _parser = new pb::MessageParser<SC_BullCardsInfo>(() => (SC_BullCardsInfo)MessagePool.Instance.Fetch(typeof(SC_BullCardsInfo)));
    public static pb::MessageParser<SC_BullCardsInfo> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int pos_;
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(26);
    private pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
      set { cards_ = value; }
    }

    private global::ETHotfix.BullCardType cardType_ = 0;
    public global::ETHotfix.BullCardType CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ActorId);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (CardType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CardType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CardType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      actorId_ = 0;
      pos_ = 0;
      cards_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActorId = input.ReadInt64();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 32: {
            cardType_ = (global::ETHotfix.BullCardType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public partial class BullBillInfo : pb::IMessage {
    private static readonly pb::MessageParser<BullBillInfo> _parser = new pb::MessageParser<BullBillInfo>(() => (BullBillInfo)MessagePool.Instance.Fetch(typeof(BullBillInfo)));
    public static pb::MessageParser<BullBillInfo> Parser { get { return _parser; } }

    private int pos_;
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    private long changeCoin_;
    public long ChangeCoin {
      get { return changeCoin_; }
      set {
        changeCoin_ = value;
      }
    }

    private long totalCoin_;
    public long TotalCoin {
      get { return totalCoin_; }
      set {
        totalCoin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (ChangeCoin != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ChangeCoin);
      }
      if (TotalCoin != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalCoin);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (ChangeCoin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChangeCoin);
      }
      if (TotalCoin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalCoin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      pos_ = 0;
      changeCoin_ = 0;
      totalCoin_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            ChangeCoin = input.ReadInt64();
            break;
          }
          case 24: {
            TotalCoin = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class SC_BullBillInfo : pb::IMessage {
    private static readonly pb::MessageParser<SC_BullBillInfo> _parser = new pb::MessageParser<SC_BullBillInfo>(() => (SC_BullBillInfo)MessagePool.Instance.Fetch(typeof(SC_BullBillInfo)));
    public static pb::MessageParser<SC_BullBillInfo> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.BullBillInfo> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.BullBillInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.BullBillInfo> datas_ = new pbc::RepeatedField<global::ETHotfix.BullBillInfo>();
    public pbc::RepeatedField<global::ETHotfix.BullBillInfo> Datas {
      get { return datas_; }
      set { datas_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ActorId);
      }
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      actorId_ = 0;
      for (int i = 0; i < datas_.Count; i++) { MessagePool.Instance.Recycle(datas_[i]); }
      datas_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActorId = input.ReadInt64();
            break;
          }
          case 18: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
